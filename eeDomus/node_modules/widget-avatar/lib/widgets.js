const fs = require('fs-extra');
const path = require('path');
const klawSync = require('klaw-sync');
const moment = require('moment');
const _ = require('underscore');

var CreateWidget = function CreateWidget () {
  if (!(this instanceof CreateWidget)) {
		return new CreateWidget();
	}

  this.CreateWidget = CreateWidget;
}


CreateWidget.prototype.init = function (CY, folder, config) {
  this.pluginPath = folder;
  this.CY = CY;
  this.Config = config;
}


function addEEDomusGraph(params) {

  return new Promise((resolve, reject) => {
    params.cyto.getGraph()
    .then(cy => params.cyto.addGraphElement(cy, params.id, params.layout, params.parent))
		.then(elem => params.cyto.addElementStyle(elem, params, params.parent))
		.then(elem => params.cyto.addElementLabel(elem, params.label))
		.then(elem => params.cyto.addElementName(elem, params.name))
    .then(elem => params.cyto.addElementClass(elem, params.class))
    .then(elem => params.cyto.addElementImage(elem, params.image))
		.then(elem => params.cyto.addElementSize(elem, params.size))
    .then(elem => params.cyto.addElementPosition(elem, params.pos))
    .then(elem => params.cyto.grabbableElement(elem, params.parent ? false : true))
		.then(elem => resolve(elem))
    .catch(err => reject(err))
  })
}


CreateWidget.prototype.saveSpecificStyle = function(cyto, class_name, id, style) {
  return new Promise((resolve, reject) => {
    cyto.getGraphElementsByClass(class_name, id)
    .then(elems => {
      return new Promise((resolve, reject) => {
          elems[0].data('style', style);
          cyto.getGraphElementsByName(elems[0].id()+'_test')
          .then(elem => {
            if (elem[0])
              cyto.removeGraphElementByID(elem[0].id())
          })
          resolve();
      })
    })
    .then(() => {
        resolve();
    })
    .catch(err => {
      reject(err);
    })
  })
}



CreateWidget.prototype.testSpecificStyle = function (cyto, class_name, style, padding) {

  return new Promise((resolve, reject) => {
    let collection = this.CY.collection();
    cyto.getGraphElementsByClass(class_name, (style.id ? style.id : null))
    .then(elems => {
      return new Promise((resolve, reject) => {
        elems.forEach(function(ele) {
          if (ele.isParent()) {
            collection = collection.union(ele);
          }
        })

        collection.forEach(function(ele) {
            cyto.testElementStyle(ele, style, false);

            cyto.getGraphElementsByName(ele.id()+'_test')
            .then(elem => {
              if (!elem[0])
                addEEDomusGraph({
                                cyto: cyto,
                                parent: ele,
                                layout: "eeDomus",
                                style: "round-rectangle",
                                name: ele.id()+'_test',
                                class: "eeDomusWidget",
                                color: ele.style('background-color'),
                                opacity: 0,
                                padding: 0,
                                label: {
                                  text: "En test !",
                                  valign: 'center',
                                  halign: 'center',
                                  fontSize : "20px",
                                  fontColor : "rgba(255, 0, 0, 1)",
                                  fontOutline : 0,
                                  textRotation: -170
                                },
                                size: {
                                  width: 50,
                                  height: 10
                                },
                                pos: {
                                  x: ele.position('x'),
                                  y: ele.position('y')
                                }
                              });
                  })


            if (ele.data('type') == 'list') {
              cyto.getGraphElementsByName(ele.id()+'_title')
              .then(items => {
                return new Promise((resolve, reject) => {
                  style.fontSize = style.font.title;
                  items[0].position('y', items[0].position('y')-(padding.image/2));
                  cyto.testElementStyle(items[0], style, true)
                  .then(() => {
                    resolve();
                  })
                })
              })
              .then(() => {
                  return new Promise((resolve, reject) => {
                      cyto.getGraphElementsByName(ele.id()+'_value')
                      .then(items=> {
                        style.fontSize = style.font.value;
                        cyto.testElementStyle(items[0], style, true)
                        .then(item => {
                          resolve(item);
                        })
                      })
                      .then(item => {
                        resolve(item);
                      })
                  })
              })
              .then(item => {
                return new Promise((resolve, reject) => {
                  let posX = item.position('x') + padding.value;
                  item.position('x', posX);
                  resolve();
                })
              })
              .then(() => {
                  return new Promise((resolve, reject) => {
                      cyto.getGraphElementsByName(ele.id()+'_status')
                      .then(items => {
                        return new Promise((resolve, reject) => {
                          style.fontSize = style.font.status;
                          items[0].position('y', items[0].position('y')+(padding.image/2));
                          cyto.testElementStyle(items[0], style, true)
                          .then(() => {
                            resolve();
                          })
                        })
                      })
                      .then(() => {
                        resolve();
                      })
                  })
              })
              .then(() => {
                  return new Promise((resolve, reject) => {
                      cyto.getGraphElementsByName(ele.id()+'_img')
                      .then(items => {
                        return new Promise((resolve, reject) => {
                          items[0].style({
                            'height': items[0].height()+padding.image,
                            'width': items[0].width()+padding.image
                          });
                          cyto.testElementStyle(items[0], style, true)
                          .then(() => {
                            resolve();
                          })
                        })
                      })
                      .then(() => {
                        resolve();
                      })
                  })
              })
              .then(() => {
                  resolve();
              })
              // fin pour list
            } else {
              cyto.getGraphElementsByName(ele.id()+'_value')
              .then(items => {
                return new Promise((resolve, reject) => {
                  style.fontSize = style.font.value;
                  cyto.testElementStyle(items[0], style, true)
                  .then(item => {
                    resolve(item);
                  })
                })
              })
              .then(item => {
                return new Promise((resolve, reject) => {
                  let posX = item.position('x') + padding.value;
                  item.position('x', posX);
                  resolve();
                })
              })
              .then(() => {
                  return new Promise((resolve, reject) => {
                      cyto.getGraphElementsByName(ele.id()+'_img')
                      .then(items => {
                        return new Promise((resolve, reject) => {
                          items[0].style({
                            'height': items[0].height()+padding.image,
                            'width': items[0].width()+padding.image
                          });
                          resolve();
                        })
                      })
                      .then(() => {
                        resolve();
                      })
                  })
              })
              .then(() => {
                resolve();
              })
            }
        }) // foreach
      }) // promise
    }) // then
    .then(() => {
      resolve();
    })
    .catch(err => {
      reject(err);
    })
  })
}


CreateWidget.prototype.createListWidget = function (cyto, params) {

  return new Promise((resolve, reject) => {
    let topParent;
    addEEDomusGraph({
                      cyto: cyto,
                      id: params.id,
                      layout: "eeDomus",
                      style: "round-rectangle",
                      name: params.id+'_node',
                      class: params.class,
                      color: params.style.color ? params.style.color : this.Config.widget.color,
                      opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                      padding: params.style.padding ? params.style.padding : this.Config.widget.padding
                    })
    .then(elem => {
      topParent = elem;
      topParent.data('type', params.type);
      topParent.data('click_values', params.click_values);
      topParent.data('dblclick_values', params.dblclick_values);
      topParent.data('usage', params.usage);
      topParent.data('last_value_change', params.last_value_change);
      topParent.data('macro', params.macro);
      return new Promise((resolve, reject) => {
        addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        style: "round-rectangle",
                        label: {
                          text: params.title,
                          valign: 'center',
                          halign: 'center',
                          fontSize : params.style.font ? params.style.font.title : this.Config.widget.font.title,
                          fontColor : params.style.textColor ? params.style.textColor : this.Config.widget.textColor,
                          fontOutline : 0
                        },
                        color: params.style.color ? params.style.color : this.Config.widget.color,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        name: params.id+'_title',
                        class: params.class,
                        size: {
                          width: params.style.title.size.width,
                          height: params.style.title.size.height
                        },
                        pos: {
                          x: params.style.title.pos.x,
                          y: params.style.title.pos.y
                        }
                      })
        .then(() => resolve())
      })
    })
    .then(() => {
      return new Promise((resolve, reject) => {

        //let values = Avatar.Functions.getSizing (params.value);

        addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        style: "round-rectangle",
                        label: {
                          'text-wrap': (params.isWrap.sizing) ? "wrap" : "none",
                          'text-max-width': "200px",
                          'text-justification': "center",
                          text: params.isWrap.value,
                          valign: 'center',
                          halign: 'center',
                          fontSize : params.style.font ? params.style.font.value : this.Config.widget.font.value,
                          fontColor : params.style.textColor ? params.style.textColor : this.Config.widget.textColor,
                          fontOutline : 0
                        },
                        color: params.style.color ? params.style.color : this.Config.widget.color,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        name: params.id+'_value',
                        class: params.class,
                        pos: {
                          x: params.style.value.pos.x,
                          y: params.style.value.pos.y
                        },
                        size: {
                          width: params.style.value.size.width,
                          height: params.style.value.size.height
                        }
                      })
        .then(() => resolve())
      })
    })
    .then(() => {
      return new Promise((resolve, reject) => {
        addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        style: "round-rectangle",
                        label: {
                          text: params.status,
                          valign: 'center',
                          halign: 'center',
                          fontSize : params.style.font ? params.style.font.status : this.Config.widget.font.status,
                          fontColor : params.style.textColor ? params.style.textColor : this.Config.widget.textColor,
                          fontOutline : 0
                        },
                        color: params.style.color ? params.style.color : this.Config.widget.color,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        name: params.id+'_status',
                        class: params.class,
                        pos: {
                          x: params.style.status.pos.x,
                          y: params.style.status.pos.y
                        },
                        size: {
                          width: params.style.status.size.width,
                          height: params.style.status.size.height
                        }
                      })
        .then(() => resolve())
      })
    })
    .then(() => {
        return new Promise((resolve, reject) => {
          addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        //style: "rectangle",
                        name:  params.id+'_img',
                        class: params.class,
                        image: params.style.image.path,
                        color: params.style.color ? params.style.color : this.Config.widget.color,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        size: {
                          width: params.style.image.size.width,
                          height: params.style.image.size.height
                        },
                        pos: {
                          x: params.style.image.pos.x,
                          y: params.style.image.pos.y
                        }
                      })
          .then(child => resolve(child))
        })
    })
    .then(child => resolve(child))
    .catch(err => {
      reject(err);
    })
  })
}


CreateWidget.prototype.createFloatWidget = function (cyto, params) {

  return new Promise((resolve, reject) => {
    let topParent;
    addEEDomusGraph({
                      cyto: cyto,
                      id: params.id,
                      layout: "eeDomus",
                      style: "rectangle",
                      name: params.id+'_node',
                      class: params.class,
                      color: params.style.color ? params.style.color : this.Config.widget.color,
                      opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                      padding: params.style.padding ? params.style.padding : this.Config.widget.padding
                    })
    .then(elem => {
      topParent = elem;
      topParent.data('type', params.type);
      topParent.data('usage', params.usage);
      topParent.data('last_value_change', params.last_value_change);
      return new Promise((resolve, reject) => {
        addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        style: "rectangle",
                        label: {
                          text: params.value+(params.unit ? ' '+params.unit : ''),
                          valign: 'center',
                          halign: 'center',
                          fontSize : params.style.font ? params.style.font.value : this.Config.widget.font.value,
                          fontColor : params.style.textColor ? params.style.textColor : this.Config.widget.textColor,
                          fontOutline : 0
                        },
                        color: params.style.color ? params.style.color : this.Config.widget.color,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        name: params.id+'_value',
                        class: params.class,
                        pos: {
                          x: params.style.value.pos.x,
                          y: params.style.value.pos.y
                        },
                        size: {
                          width: params.style.value.size.width,
                          height: params.style.value.size.height
                        }
                      })
        .then(() => resolve())
      })
    })
    .then(() => {
        return new Promise((resolve, reject) => {
          addEEDomusGraph({
                        cyto: cyto,
                        parent: topParent,
                        layout: "eeDomus",
                        //style: "rectangle",
                        name:  params.id+'_img',
                        class: params.class,
                        image: params.style.image.path,
                        opacity: params.style.opacity ? params.style.opacity : this.Config.widget.opacity,
                        padding: params.style.padding ? params.style.padding : this.Config.widget.padding,
                        size: {
                          width: params.style.image.size.width,
                          height: params.style.image.size.height
                        },
                        pos: {
                          x: params.style.image.pos.x,
                          y: params.style.image.pos.y
                        }
                      })
          .then(child => {
              child.data('last_value', params.last_value);
              resolve(child);
          })
        })
    })
    .then(child => resolve(child))
    .catch(err => {
      reject(err);
    })
  })
}


CreateWidget.prototype.create = function (cyto, params) {

  return new Promise((resolve, reject) => {
    switch (params.type) {
      case 'list':
        this.createListWidget(cyto, params)
        .then(child => {
            if (params.customized == true)
              this.saveSpecificStyle(cyto, "eeDomusWidget",  child.parent().id(), params.style)
              .then(() => {
                resolve(child);
              })
            else
              resolve(child);
        })
        .catch(err => {
          console.log('err:', err || 'erreur dans la création du widget');
          reject(err);
        })
        break;
      case 'float':
        this.createFloatWidget(cyto, params)
        .then(child => {
          if (params.customized == true)
            this.saveSpecificStyle(cyto, "eeDomusWidget",  child.parent().id(), params.style)
            .then(() => {
              resolve(child);
            })
          else
            resolve(child);
        })
        .catch(err => {
          console.log('err:', err || 'erreur dans la création du widget');
          reject(err);
        })
        break;
    }
  });

}


CreateWidget.prototype.loadAll = function (cyto) {

  return new Promise((resolve, reject) => {
    let folder = path.normalize (this.pluginPath+'/assets/widget');
    let widget_col = this.CY.collection();
    if (fs.existsSync(folder)) {
      let widgets = klawSync(path.normalize (folder), {nodir: true, depthLimit: 1});
      let nb = 0;
      for (let i=0; i < widgets.length; i++) {
        let widgetJson = fs.readJsonSync (widgets[i].path, { throws: false });
        if (widgetJson && widgetJson.id) {
          Avatar.EEDomusLib.getPeriphCaract(widgetJson.id)
          .then(current_values => {
              return new Promise((resolve, reject) => {
                let diff = moment().diff(current_values.last_value_change.replace(' ','T'), 'seconds');
                widgetJson.value = current_values.last_value_text ? current_values.last_value_text : current_values.last_value;
                widgetJson.isWrap = Avatar.Functions.getSizing (widgetJson.value);
                widgetJson.status = Avatar.Functions.timeConvert(diff);
                widgetJson.unit = current_values.unit ? current_values.unit : "";
                widgetJson.last_value = current_values.last_value;
                widgetJson.last_value_change = current_values.last_value_change;
                resolve();
              })
            })
            .then(() => {
              return new Promise((resolve, reject) => {
                if (widgetJson.type == 'list' && widgetJson.click_values.length == 0 && widgetJson.dblclick_values.length == 0) {
                    Avatar.EEDomusLib.getPeriphValueList(widgetJson.id)
                    .then((list) =>  {
                      widgetJson.click_values = list.values;
                      widgetJson.click_values_added = true;
                      resolve();
                    })
                } else {
                  resolve();
                }
              })
            })
            .then(() => {
              return new Promise((resolve, reject) => {
                Avatar.Functions.getImageSync(widgetJson.usage, widgetJson.id, widgetJson.value, widgetJson)
                .then((file) => {
                  widgetJson.style.image.path = file;
                  if (widgetJson.click_values_added) {
                      widgetJson.click_values = [];
                  }
                  resolve();
                })
             })
          })
          .then(() => this.create(cyto, {
                    id: widgetJson.id,
                    class: widgetJson.class,
                    title: widgetJson.title,
                    value: widgetJson.value,
                    macro: widgetJson.macro ? widgetJson.macro : false,
                    click_values: widgetJson.click_values,
                    dblclick_values: widgetJson.dblclick_values,
                    usage: widgetJson.usage,
                    status: widgetJson.status,
                    isWrap: widgetJson.isWrap,
                    customized: widgetJson.style.color ? true : false,
                    style: widgetJson.style,
                    unit: widgetJson.unit,
                    type: widgetJson.type,
                    last_value_change: widgetJson.last_value_change
                  }))
          .then(elem => {
            widget_col = widget_col.union(elem);
            if ((nb+1) == widgets.length)
              resolve (widget_col);
            else
              nb = nb+1;
          })
          .catch (err => {
            console.log('err', err);
            resolve ();
          })
        } else {
          // supression du fichier json
          let widget = widgets[i].path.substring(widgets[i].path.lastIndexOf("\\") + 1).replace('.json', '');
          fs.removeSync(widgets[i].path);
          let notif = document.getElementById('nonode');
          if (notif.opened == true) notif.opened = false;
          notif.innerHTML = "Erreur de chargement du widget "+widget+".<br>Le fichier de sauvegarde du widget est vide et a été supprimé.";
          notif.opened = true;

          if ((nb+1) == widgets.length)
            resolve (widget_col);
          else
            nb = nb+1;
        }
      }
      if (widgets.length == 0) resolve (widget_col);
    } else {
      resolve (widget_col);
    }
  })
}


CreateWidget.prototype.deleteWidget = function (cyto, id, class_name) {

  return new Promise((resolve, reject) => {
    var collection = this.CY.collection();
    cyto.getGraphElementsByClass(class_name)
    .then(elems => {
      return new Promise((resolve, reject) => {
        elems.forEach(function(ele) {
          if (ele.data('name') == id+'_node' || ele.data('name') == id+'_title' || ele.data('name') == id+'_value' || ele.data('name') == id+'_status' || ele.data('name') == id+'_img') {
            collection = collection.union(ele);
          }
        })
        resolve();
      })
    })
    .then(() => {
      this.CY.remove(collection);
      resolve();
    })
    .catch(err => {
      console.log('Erreur de suppression du Widget:', err)
      reject();
    })
  })
}


CreateWidget.prototype.deleteAllWidgets = function (cyto, class_name) {

  return new Promise((resolve, reject) => {
    var collection = this.CY.collection();
    cyto.getGraphElementsByClass(class_name)
    .then(elems => {
      return new Promise((resolve, reject) => {
        elems.forEach(function(ele) {
            collection = collection.union(ele);
        })
        resolve();
      })
    })
    .then(() => {
      this.CY.remove(collection);
      resolve();
    })
    .catch(err => {
      console.log('Erreur de suppression des Widgets:', err)
      reject();
    })
  })
}


CreateWidget.prototype.newImage = function (cyto, arg) {
  return new Promise((resolve, reject) => {
    let folderImage = path.normalize (__dirname+'/../../../assets/images/widget');

    if (arg.usage_name.indexOf(" [") != -1)
       arg.usage_name = arg.usage_name.substring(0,arg.usage_name.indexOf(" [")).replace(/ /g,'_')
    arg.usage_name = arg.usage_name.replace(/ /g,'_').replace(/\//g,'_');

    folderImage = arg.periph_id ? folderImage+"\\"+arg.usage_name+"\\"+arg.periph_id : folderImage+"\\"+arg.usage_name;
    fs.ensureDirSync(folderImage);
    fs.copySync(arg.file, folderImage+"\\"+arg.name.replace(/ /g,'_')+".png");
    resolve();
  })
}


CreateWidget.prototype.getWidgets = function (cyto, class_name) {

  return new Promise((resolve, reject) => {
    let infos = [];

    cyto.getGraphElementsByClass(class_name)
    .then(elems => {
      let size = 0, count = 0;
      return new Promise((resolve, reject) => {
        elems.forEach(function(ele) {
          if (ele.isParent()) size++;
        })

        elems.forEach(function(ele) {
          if (ele.isParent()) {
            let style = {};
            style.id = ele.id();
            style.type = ele.data('type');
            style.usage = ele.data('usage');
            style.click_values = ele.data('click_values') ? ele.data('click_values') : [];
            style.dblclick_values = ele.data('dblclick_values') ? ele.data('dblclick_values') : [];
            style.macro = ele.data('macro') ? ele.data('macro') : false;
            cyto.getGraphElementsByName(ele.id()+(style.type == 'list' ? '_title' : '_value'))
            .then(items => {
              return new Promise((resolve, reject) => {
                style.title = items[0]._private.style.label.value;
                resolve();
              })
            })
            .then(() => cyto.getGraphElementsByName(ele.id()+'_value'))
            .then(items => {
              return new Promise((resolve, reject) => {
                style.value = items[0]._private.style.label.value || null;
                resolve();
              })
            })
            .then(() => {
              style.style = ele.data('style') ? ele.data('style') : null;
              infos.push(style);
              count += 1;
              if (count == size)
                resolve();
            })
            .catch(err => {
              reject(err);
            })
          }
        })

        if (size == 0) resolve ();
      })
    })
    .then(() => {
      resolve (infos);
    })
    .catch(err => {
      console.log('Erreur getWidgets:', err)
      reject();
    })
  })
}


CreateWidget.prototype.saveAll = function (cyto, class_name) {

  return new Promise((resolve, reject) => {
    if (!class_name) resolve();
    let folder = path.normalize (this.pluginPath+'/assets/widget');
    fs.ensureDirSync(folder);
    cyto.getGraphElementsByClass(class_name)
    .then(elems => {
      return new Promise((resolve, reject) => {
        elems.forEach(function(ele) {
          if (ele.isParent()) {
            let style = {};
            style.id = ele.id();
            style.class = ele.classes()[0];
            style.type = ele.data('type');
            style.click_values = ele.data('click_values') ? ele.data('click_values') : [];
            style.dblclick_values = ele.data('dblclick_values') ? ele.data('dblclick_values') : [];
            style.usage = ele.data('usage');
            style.macro = ele.data('macro') ? ele.data('macro') : false;
            cyto.getGraphElementsByName(ele.id()+(style.type == 'list' ? '_title' : '_value'))
            .then(items => {
              if (items[0]._private.style.label && items[0]._private.style.label.value)
                style.title = items[0]._private.style.label.value;
              else
                style.title = "NaN";
            })

            if (ele.data('style')) {
              style.style = ele.data('style');
              style.style = _.omit(style.style, 'id');
            } else {
              style.style = {};
            }

            cyto.getGraphElementsByName(ele.id()+'_test')
            .then(elem => {
              if (!elem[0]) {
                  if (style.type == 'list') {
                    cyto.getGraphElementsByName(ele.id()+'_title')
                    .then(items => {
                      return new Promise((resolve, reject) => {
                        style.style.title = {};
                        style.style.title.pos = {x: items[0].position('x'), y: items[0].position('y')};
                        style.style.title.size = {width: items[0].width(), height: items[0].height()};
                        resolve();
                      });
                    })
                    .then(() => cyto.getGraphElementsByName(ele.id()+'_status'))
                    .then(items => {
                        style.style.status = {};
                        style.style.status.pos = {x: items[0].position('x'), y: items[0].position('y')};
                        style.style.status.size = {width: items[0].width(), height: items[0].height()};
                    })
                  }

                  cyto.getGraphElementsByName(ele.id()+'_value')
                  .then(items => {
                    return new Promise((resolve, reject) => {
                      style.style.value = {};
                      style.style.value.pos = {x: items[0].position('x'), y: items[0].position('y')};
                      style.style.value.size = {width: items[0].width(), height: items[0].height()};
                      resolve();
                    });
                  })
                  .then(() => cyto.getGraphElementsByName(ele.id()+'_img'))
                  .then(items => {
                    return new Promise((resolve, reject) => {
                      style.style.image = {};
                      style.style.image.size = {width: items[0].width(), height: items[0].height()};
                      style.style.image.pos = {x: items[0].position('x'), y: items[0].position('y')};
                      resolve();
                    });
                  })
                  .then(() => {
                    fs.writeJsonSync(folder+'/'+style.id+'.json', style);
                  })
                  .catch(err => {
                    reject(err);
                  })
                }
              })
            }
        })
        resolve();
      })
    })
    .then(() => {
      resolve ();
    })
    .catch(err => {
      reject(err);
    })
  })
}

/**  Export Graph */
module.exports.CreateWidget = CreateWidget;
