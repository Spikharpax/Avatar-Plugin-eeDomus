const _ = require('underscore');
const fs = require('fs-extra');
const klawSync = require('klaw-sync');
const path = require('path');
const moment = require('moment');


var saveConfig = function (config) {
  return new Promise((resolve, reject) => {
      let file = path.normalize (__dirname+'/../../eeDomus.prop');
      fs.writeJsonSync(file, {"modules":{ "eeDomus": config}});
      resolve();
  })
}

var removeWidgetInfos = function (periph_id) {
  return new Promise((resolve, reject) => {
    let file = path.normalize (__dirname+'/../../assets/widget/'+periph_id+".json");
    fs.remove(file, err => {
      if (err) {
        console.log('Erreur dans la suppression du fichier infos du widget:', err);
        return reject();
      }
      resolve();
    })
  })
}


var removeAllWidgetInfos = function (periph_id) {
  return new Promise((resolve, reject) => {
    let dir = path.normalize (__dirname+'/../../assets/widget');
    fs.remove(dir, err => {
      if (err) {
        console.log('Erreur dans la suppression des fichiers infos des widgets:', err);
        return reject();
      }
      resolve();
    })
  })
}



var getSizing = function (value) {

  let sizing = false;
  if (value.indexOf(' ') != -1) {
    value = value.replace(/ /g,'\n');
    sizing = true;
  }
  return ({sizing: sizing, value: value});
}



var refreshWidget = function (cyto, widget, periph_id, usage, infos) {

  let diff = moment().diff(infos.last_value_change.replace(' ','T'), 'seconds');
  infos.value = infos.last_value_text ? infos.last_value_text : infos.last_value;
  infos.status = this.timeConvert(diff);
  infos.unit = infos.unit ? infos.unit : "";
  infos.last_value = infos.last_value;

  widget.parent().data('last_value_change', infos.last_value_change);
  widget.parent().data('byBox', false);

  this.getImageSync(usage, periph_id, infos.value, null, widget.parent())
  .then((file) => {
    return new Promise((resolve, reject) => {
      infos.img = file;
      resolve();
    })
  })
  .then(() => cyto.addElementImage(widget, infos.img))
  .then(() => cyto.getGraphElementByName(periph_id+'_value'))
  .then(widget_value => {
      return new Promise((resolve, reject) => {
        let values = getSizing (infos.value);
        cyto.addElementLabel(widget_value,
                        {
                          'text-wrap': (values.sizing) ? "wrap" : "none",
                          'text-max-width': "200px",
                          'text-justification': "center",
                          text: values.value+(infos.unit ? ' '+infos.unit : ''),
                          valign: 'center',
                          halign: 'center',
                          fontSize : widget_value.style('font-size'),
                          fontColor : widget_value.style('color'),
                          fontOutline : 0
        })
        .then(() => {
            resolve();
        })
    })
  })
  .then(() => cyto.getGraphElementByName(periph_id+'_status'))
  .then(widget_status => cyto.addElementLabelOnly(widget_status, infos.status))
  .catch(err => {
    console.log('Refresh widget', err);
  })

}



var refreshWidgetInfos = function (cyto, widget, periph_id, usage) {

  return new Promise((resolve, reject) => {
    let infos = {};
    let click_values_added;
    Avatar.EEDomusLib.getPeriphCaract(periph_id)
    .then(current_values => {
        return new Promise((resolve, reject) => {
          let diff = moment().diff(current_values.last_value_change.replace(' ','T'), 'seconds');
          infos.value = current_values.last_value_text ? current_values.last_value_text : current_values.last_value;
          infos.status = this.timeConvert(diff);
          infos.unit = current_values.unit ? current_values.unit : "";
          infos.last_value = current_values.last_value;
          widget.parent().data('last_value_change', current_values.last_value_change);
          resolve();
        })
      })
      .then(() => {
        return new Promise((resolve, reject) => {
          if (widget.parent().data('type') == 'list' && widget.parent().data('click_values').length == 0 && widget.parent().data('dblclick_values').length == 0) {
              Avatar.EEDomusLib.getPeriphValueList(periph_id)
              .then((list) =>  {
                widget.parent().data('click_values', list.values);
                click_values_added = true;
                resolve();
              })
          } else {
            resolve();
          }
        })
      })
      .then(() => {
        return new Promise((resolve, reject) => {
          this.getImageSync(usage, periph_id, infos.value, null, widget.parent())
          .then((file) => {
            infos.img = file;
            if (click_values_added) {
                widget.parent().data('click_values', []);
            }
            resolve();
          })
       })
    })
    .then(() => cyto.addElementImage(widget, infos.img))
    .then(() => cyto.getGraphElementByName(periph_id+'_value'))
    .then(widget_value => {
          return new Promise((resolve, reject) => {
            let values = getSizing (infos.value);
            cyto.addElementLabel(widget_value,
                            {
                              'text-wrap': (values.sizing) ? "wrap" : "none",
                              'text-max-width': "200px",
                              'text-justification': "center",
                              text: values.value+(infos.unit ? ' '+infos.unit : ''),
                              valign: 'center',
                              halign: 'center',
                              fontSize : widget_value.style('font-size'),
                              fontColor : widget_value.style('color'),
                              fontOutline : 0
            })
            .then(() => {
                resolve();
            })
          })
    })
    .then(() => cyto.getGraphElementByName(periph_id+'_status'))
    .then(widget_status => cyto.addElementLabelOnly(widget_status, infos.status))
    .then(() => {
      resolve();
    })
    .catch(err => {
      reject(err);
    })
  })
}

var timeConvert = function (n) {
  if (n <= 60) {
    let sec = 'DEPUIS '+n+' SEC';
    return sec.replace('-','');
  }
  if (n <= 3600) return 'DEPUIS '+Math.round(n / 60)+' MIN';
  if (n <= 86400) return 'DEPUIS '+Math.round((n / 60) / 60)+' HEURES';
  if (n <= 2678400) return 'DEPUIS '+Math.round(((n / 60) /60) / 24)+' JOURS';
  return 'DEPUIS '+Math.round((((n / 60) /60)/ 24) / 31)+' MOIS';
}


function deletePersonnalizedImage (usage, periph_id) {
  return new Promise((resolve, reject) => {

    let usage_folders = [];
    let folder = path.normalize (__dirname+'/../../assets/images/widget');
    fs.ensureDirSync(folder);

    let widgets = klawSync(folder, {nodir: false, depthLimit:0});
    for (let i=0; i < widgets.length; i++) {
      usage_folders.push(widgets[i].path.substring(widgets[i].path.lastIndexOf("\\")).replace('\\',''))
    }
    let folder_usage = _.find(usage_folders, function(num){
      return usage.toLowerCase().indexOf(num.toLowerCase().replace(/_/g,' ')) != -1 || usage.toLowerCase().indexOf(num.toLowerCase().replace(/\//g,' ')) != -1;
    });

    if (folder_usage) {
      let folder = path.normalize (__dirname+'/../../assets/images/widget/'+'/'+folder_usage.replace(/ /g,'_')+'/'+periph_id);
      fs.remove(folder, err => {
        if (err) {
          console.log('Erreur dans la suppression du rÃ©pertoire images:', err);
          return reject();
        }
        resolve();
      })
    } else {
      reject();
    }
  })
}


function getImages(arg) {

  return new Promise((resolve, reject) => {

    let usage_folders = [];
    let folder = path.normalize (__dirname+'/../../assets/images/widget');
    fs.ensureDirSync(folder);

    let widgets = klawSync(folder, {nodir: false, depthLimit:0});
    for (let i=0; i < widgets.length; i++) {
      usage_folders.push(widgets[i].path.substring(widgets[i].path.lastIndexOf("\\")).replace('\\',''))
    }
    let folder_usage = _.find(usage_folders, function(num){
      return arg.usage.toLowerCase().indexOf(num.toLowerCase().replace(/_/g,' ')) != -1 || arg.usage.toLowerCase().indexOf(num.toLowerCase().replace(/\//g,' ')) != -1;
    });

    let filenames = [];
    if (folder_usage) {
      folder_usage = path.normalize(folder+'\\'+folder_usage.replace(/ /g,'_'));
      let folderID = folder_usage+"\\"+arg.periph_id;
      if (fs.existsSync(folderID)) {
        let testfilenames = [];
        let files = klawSync(folderID, {nodir: false, depthLimit: 0});
        for (let i=0; i < files.length; i++) {
          let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
          if (_.contains(arg.values, test))
            testfilenames.push({name: test, file: files[i].path});
        }

        if (testfilenames.length < arg.values.length) {

          let tosearch = [];
          for (let a=0; a < testfilenames.length; a++) {
            tosearch.push(testfilenames[a].name);
          }

          let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
          for (let i=0; i < files.length; i++) {
            let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
            if (tosearch.length > 0) {
              if (!_.contains(tosearch, test))
                filenames.push(files[i].path);
            } else {
                if (_.contains(arg.values, test))
                  filenames.push(files[i].path);
            }
          }
          for (let b=0; b < testfilenames.length; b++) {
            filenames.push(testfilenames[b].file);
          }
          resolve (filenames);
        } else {
          for (let a=0; a < testfilenames.length; a++) {
            filenames.push(testfilenames[a].file);
          }
          resolve (filenames);
        }
      } else {
        let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
        for (let i=0; i < files.length; i++) {
          let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
          if (_.contains(arg.values, test))
            filenames.push(files[i].path);
        }
        resolve (filenames);
      }
    } else {
      resolve (filenames);
    }

  })
}


function getValues(json, item) {
  let click_values = json ?  _.pluck(json.click_values, 'description') : _.pluck(item.data('click_values'), 'description');
  let dblclick_values = json ? _.pluck(json.dblclick_values, 'description') : _.pluck(item.data('dblclick_values'), 'description');
  let type = json ? json.type : item.data('type');

  if (type == 'list') {
    if (click_values.length == 0)
      return ['Other'];
    if (click_values.length == 2 && dblclick_values.length > 0)
      click_values.push('Other');
    return  click_values;
  } else {
    return ['Other'];
  }
}


function getImage(usage, periph_id, value_text, json, item) {

  value_text = value_text.replace(/ /g,'_')

  if (!json && !item)
    return path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');

  let values = getValues(json, item);
  for (let k=0; k < values.length; k++) {
    values[k] = values[k].replace(/ /g,'_');
  }

  let usage_folders = [];
  let folder = path.normalize (__dirname+'/../../assets/images/widget');
  fs.ensureDirSync(folder);

  let widgets = klawSync(folder, {nodir: false, depthLimit:0});
  for (let i=0; i < widgets.length; i++) {
    usage_folders.push(widgets[i].path.substring(widgets[i].path.lastIndexOf("\\")).replace('\\',''))
  }
  let folder_usage = _.find(usage_folders, function(num){
    return usage.toLowerCase().indexOf(num.toLowerCase().replace(/_/g,' ')) != -1 || usage.toLowerCase().indexOf(num.toLowerCase().replace(/\//g,' ')) != -1;
  });

  let filenames = [];
  if (folder_usage) {
    folder_usage = path.normalize(folder+'\\'+folder_usage.replace(/ /g,'_'));
    let folderID = folder_usage+"\\"+periph_id;

    if (fs.existsSync(folderID)) {
      let testfilenames = [];
      let files = klawSync(folderID, {nodir: false, depthLimit: 0});
      for (let i=0; i < files.length; i++) {
        let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
        if (_.contains(values, test))
          testfilenames.push({name: test, file: files[i].path});
      }

      if (testfilenames.length < values.length) {
        let tosearch = [];
        for (let a=0; a < testfilenames.length; a++) {
          tosearch.push(testfilenames[a].name);
        }

        let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
        for (let i=0; i < files.length; i++) {
          let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
          if (tosearch.length > 0) {
            if (!_.contains(tosearch, test)) {
              filenames.push(files[i].path);
            }
          } else {
              if (_.contains(values, test))
                filenames.push(files[i].path);
          }
        }
        for (let b=0; b < testfilenames.length; b++) {
          filenames.push(testfilenames[b].file);
        }

        let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
        let found;
        for (let c=0; c < filenames.length; c++) {
          let test = filenames[c].substring(filenames[c].lastIndexOf("\\")).replace('\\','').replace('.png','');
          if (value_text == test) {
              file = filenames[c];
              break;
          }
          if (test == 'Other') found = true;
        }
        if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
          file = folderID+"\\Other.png";
        return file;

      } else {
        let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
        let found;
        for (let a=0; a < testfilenames.length; a++) {
          let test = testfilenames[a].file.substring(testfilenames[a].file.lastIndexOf("\\")).replace('\\','').replace('.png','');
          if (value_text == test) {
              file = testfilenames[a].file;
              break;
          }
          if (test == 'Other') found = true;
        }
        if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
          file = folderID+"\\Other.png";
        return file;
      }
    } else {
      let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
      let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
      let found;
      for (let i=0; i < files.length; i++) {
        let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
        if (value_text == test) {
            file = files[i].path;
            break;
        }
        if (test == 'Other') found = true;
      }
      if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
        file = folder_usage+"\\Other.png";
      return file;
    }
  } else {
    return path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
  }

}



function getImageSync(usage, periph_id, value_text, json, item) {
  return new Promise((resolve, reject) => {

      value_text = value_text.replace(/ /g,'_')
      if (!json && !item)
        resolve(path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png'));

      let values = getValues(json, item);
      for (let k=0; k < values.length; k++) {
        values[k] = values[k].replace(/ /g,'_');
      }

      let usage_folders = [];
      let folder = path.normalize (__dirname+'/../../assets/images/widget');
      fs.ensureDirSync(folder);

      let widgets = klawSync(folder, {nodir: false, depthLimit:0});
      for (let i=0; i < widgets.length; i++) {
        usage_folders.push(widgets[i].path.substring(widgets[i].path.lastIndexOf("\\")).replace('\\',''))
      }
      let folder_usage = _.find(usage_folders, function(num){
        return usage.toLowerCase().indexOf(num.toLowerCase().replace(/_/g,' ')) != -1 || usage.toLowerCase().indexOf(num.toLowerCase().replace(/\//g,' ')) != -1;
      });

      let filenames = [];
      if (folder_usage) {
        folder_usage = path.normalize(folder+'\\'+folder_usage.replace(/ /g,'_'));
        let folderID = folder_usage+"\\"+periph_id;
        if (fs.existsSync(folderID)) {
          let testfilenames = [];
          let files = klawSync(folderID, {nodir: false, depthLimit: 0});
          for (let i=0; i < files.length; i++) {
            let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
            if (_.contains(values, test)) {
              testfilenames.push({name: test, file: files[i].path});
            }
          }

          if (testfilenames.length < values.length) {
            let tosearch = [];
            for (let a=0; a < testfilenames.length; a++) {
              tosearch.push(testfilenames[a].name);
            }

            let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
            for (let i=0; i < files.length; i++) {
              let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
              if (tosearch.length > 0) {
                if (!_.contains(tosearch, test))
                  filenames.push(files[i].path);
              } else {
                  if (_.contains(values, test))
                    filenames.push(files[i].path);
              }
            }
            for (let b=0; b < testfilenames.length; b++) {
              filenames.push(testfilenames[b].file);
            }

            let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
            let found;
            for (let c=0; c < filenames.length; c++) {
              let test = filenames[c].substring(filenames[c].lastIndexOf("\\")).replace('\\','').replace('.png','');
              if (value_text == test) {
                  file = filenames[c];
                  break;
              }
              if (test == 'Other') found = true;
            }
            if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
              file = folderID+"\\Other.png";
            resolve(file);

          } else {
            let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
            let found;
            for (let a=0; a < testfilenames.length; a++) {
              let test = testfilenames[a].file.substring(testfilenames[a].file.lastIndexOf("\\")).replace('\\','').replace('.png','');
              if (value_text == test) {
                  file = testfilenames[a].file;
                  break;
              }
              if (test == 'Other') found = true;
            }
            if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
              file = folderID+"\\Other.png";
            resolve(file);
          }
        } else {
          let file = path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png');
          let files = klawSync(folder_usage, {nodir: true, depthLimit: 0});
          let found;
          for (let i=0; i < files.length; i++) {
            let test = files[i].path.substring(files[i].path.lastIndexOf("\\")+1).replace('.png','');
            if (value_text == test) {
                file = files[i].path;
                break;
            }
            if (test == 'Other') found = true;
          }

          if (file == path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png') && found)
            file = folder_usage+"\\Other.png";
          resolve(file);
        }
      } else {
        resolve(path.normalize(__dirname+'/../../assets/images/widget/Default/eeDomus.png'));
      }
  })

}


let periphInfos;
function addperiphInfos(infos) {
  periphInfos=infos;
}


var FunctionsManager = {

  'init': function() {
		return FunctionsManager;
  },
  'addperiphInfos': addperiphInfos,
  'timeConvert': timeConvert,
  'getImage': getImage,
  'getImageSync': getImageSync,
  'getImages': getImages,
  'refreshWidgetInfos': refreshWidgetInfos,
  'refreshWidget': refreshWidget,
  'removeWidgetInfos' : removeWidgetInfos,
  'removeAllWidgetInfos': removeAllWidgetInfos,
  'deletePersonnalizedImage': deletePersonnalizedImage,
  'saveConfig': saveConfig,
  'getSizing': getSizing
}


// Exports Config
exports.init = FunctionsManager.init;
